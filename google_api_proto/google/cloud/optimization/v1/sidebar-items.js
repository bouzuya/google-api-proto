initSidebarItems({"enum":[["DataFormat","Data formats for input and output files."]],"mod":[["async_model_metadata","Nested message and enum types in `AsyncModelMetadata`."],["batch_optimize_tours_request","Nested message and enum types in `BatchOptimizeToursRequest`."],["break_rule","Nested message and enum types in `BreakRule`."],["fleet_routing_client","Generated client implementations."],["injected_solution_constraint","Nested message and enum types in `InjectedSolutionConstraint`."],["input_config","Nested message and enum types in `InputConfig`."],["optimize_tours_request","Nested message and enum types in `OptimizeToursRequest`."],["optimize_tours_response","Nested message and enum types in `OptimizeToursResponse`."],["optimize_tours_validation_error","Nested message and enum types in `OptimizeToursValidationError`."],["output_config","Nested message and enum types in `OutputConfig`."],["shipment","Nested message and enum types in `Shipment`."],["shipment_model","Nested message and enum types in `ShipmentModel`."],["shipment_route","Nested message and enum types in `ShipmentRoute`."],["shipment_type_incompatibility","Nested message and enum types in `ShipmentTypeIncompatibility`."],["shipment_type_requirement","Nested message and enum types in `ShipmentTypeRequirement`."],["skipped_shipment","Nested message and enum types in `SkippedShipment`."],["vehicle","Nested message and enum types in `Vehicle`."],["waypoint","Nested message and enum types in `Waypoint`."]],"struct":[["AggregatedMetrics","Aggregated metrics for [ShipmentRoute][google.cloud.optimization.v1.ShipmentRoute] (resp. for [OptimizeToursResponse][google.cloud.optimization.v1.OptimizeToursResponse] over all [Transition][google.cloud.optimization.v1.ShipmentRoute.Transition] and/or [Visit][google.cloud.optimization.v1.ShipmentRoute.Visit] (resp. over all [ShipmentRoute][google.cloud.optimization.v1.ShipmentRoute]) elements."],["AsyncModelMetadata","The long running operation metadata for async model related methods."],["BatchOptimizeToursRequest","Request to batch optimize tours as an asynchronous operation. Each input file should contain one `OptimizeToursRequest`, and each output file will contain one `OptimizeToursResponse`. The request contains information to read/write and parse the files. All the input and output files should be under the same project."],["BatchOptimizeToursResponse","Response to a `BatchOptimizeToursRequest`. This is returned in the LRO Operation after the operation is complete."],["BreakRule","Rules to generate time breaks for a vehicle (e.g. lunch breaks). A break is a contiguous period of time during which the vehicle remains idle at its current position and cannot perform any visit. A break may occur:"],["CapacityQuantity","Deprecated: Use [Shipment.Load][], [Vehicle.LoadLimit][] and [ShipmentRoute.VehicleLoad][] instead."],["CapacityQuantityInterval","Deprecated: Use [Vehicle.LoadLimit.Interval][] instead."],["DistanceLimit","A limit defining a maximum distance which can be traveled. It can be either hard or soft."],["GcsDestination","The Google Cloud Storage location where the output file will be written to."],["GcsSource","The Google Cloud Storage location where the input file will be read from."],["InjectedSolutionConstraint","Solution injected in the request including information about which visits must be constrained and how they must be constrained."],["InputConfig","The desired input location information."],["Location","Encapsulates a location (a geographic point, and an optional heading)."],["OptimizeToursRequest","Request to be given to a tour optimization solver which defines the shipment model to solve as well as optimization parameters."],["OptimizeToursResponse","Response after solving a tour optimization problem containing the routes followed by each vehicle, the shipments which have been skipped and the overall cost of the solution."],["OptimizeToursValidationError","Describes an error encountered when validating an `OptimizeToursRequest`."],["OutputConfig","The desired output location."],["Shipment","The shipment of a single item, from one of its pickups to one of its deliveries. For the shipment to be considered as performed, a unique vehicle must visit one of its pickup locations (and decrease its spare capacities accordingly), then visit one of its delivery locations later on (and therefore re-increase its spare capacities accordingly)."],["ShipmentModel","A shipment model contains a set of shipments which must be performed by a set of vehicles, while minimizing the overall cost, which is the sum of:"],["ShipmentRoute","A vehicle’s route can be decomposed, along the time axis, like this (we assume there are n visits):"],["ShipmentTypeIncompatibility","Specifies incompatibilties between shipments depending on their shipment_type. The appearance of incompatible shipments on the same route is restricted based on the incompatibility mode."],["ShipmentTypeRequirement","Specifies requirements between shipments based on their shipment_type. The specifics of the requirement are defined by the requirement mode."],["SkippedShipment","Specifies details of unperformed shipments in a solution. For trivial cases and/or if we are able to identify the cause for skipping, we report the reason here."],["TimeWindow","Time windows constrain the time of an event, such as the arrival time at a visit, or the start and end time of a vehicle."],["TransitionAttributes","Specifies attributes of transitions between two consecutive visits on a route. Several `TransitionAttributes` may apply to the same transition: in that case, all extra costs add up and the strictest constraint or limit applies (following natural “AND” semantics)."],["Vehicle","Models a vehicle in a shipment problem. Solving a shipment problem will build a route starting from `start_location` and ending at `end_location` for this vehicle. A route is a sequence of visits (see `ShipmentRoute`)."],["Waypoint","Encapsulates a waypoint. Waypoints mark arrival and departure locations of VisitRequests, and start and end locations of Vehicles."]]});